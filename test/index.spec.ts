import Colorizr, {
  brightnessDifference,
  chroma,
  colorDifference,
  compare,
  contrast,
  convert,
  darken,
  desaturate,
  extractAlphaFromHex,
  extractColorParts,
  formatCSS,
  formatHex,
  hex2hsl,
  hex2oklab,
  hex2oklch,
  hex2rgb,
  hsl2hex,
  hsl2oklab,
  hsl2oklch,
  hsl2rgb,
  isHex,
  isHSL,
  isLAB,
  isLCH,
  isRGB,
  isValidColor,
  lighten,
  luminance,
  name,
  opacify,
  opacity,
  palette,
  parseCSS,
  random,
  rgb2hex,
  rgb2hsl,
  rgb2oklab,
  rgb2oklch,
  rotate,
  saturate,
  scheme,
  swatch,
  textColor,
  transparentize,
} from '~/index';

describe('helpers', () => {
  it('should have all the helpers', () => {
    expect(Colorizr).toEqual(expect.any(Function));
    expect(brightnessDifference).toEqual(expect.any(Function));
    expect(chroma).toEqual(expect.any(Function));
    expect(colorDifference).toEqual(expect.any(Function));
    expect(compare).toEqual(expect.any(Function));
    expect(contrast).toEqual(expect.any(Function));
    expect(convert).toEqual(expect.any(Function));
    expect(darken).toEqual(expect.any(Function));
    expect(desaturate).toEqual(expect.any(Function));
    expect(extractAlphaFromHex).toEqual(expect.any(Function));
    expect(extractColorParts).toEqual(expect.any(Function));
    expect(formatCSS).toEqual(expect.any(Function));
    expect(formatHex).toEqual(expect.any(Function));
    expect(hex2hsl).toEqual(expect.any(Function));
    expect(hex2oklab).toEqual(expect.any(Function));
    expect(hex2oklch).toEqual(expect.any(Function));
    expect(hex2rgb).toEqual(expect.any(Function));
    expect(hsl2hex).toEqual(expect.any(Function));
    expect(hsl2oklab).toEqual(expect.any(Function));
    expect(hsl2oklch).toEqual(expect.any(Function));
    expect(hsl2rgb).toEqual(expect.any(Function));
    expect(isHSL).toEqual(expect.any(Function));
    expect(isLAB).toEqual(expect.any(Function));
    expect(isLCH).toEqual(expect.any(Function));
    expect(isRGB).toEqual(expect.any(Function));
    expect(isValidColor).toEqual(expect.any(Function));
    expect(isHex).toEqual(expect.any(Function));
    expect(lighten).toEqual(expect.any(Function));
    expect(luminance).toEqual(expect.any(Function));
    expect(name).toEqual(expect.any(Function));
    expect(opacify).toEqual(expect.any(Function));
    expect(opacity).toEqual(expect.any(Function));
    expect(palette).toEqual(expect.any(Function));
    expect(parseCSS).toEqual(expect.any(Function));
    expect(random).toEqual(expect.any(Function));
    expect(rgb2hex).toEqual(expect.any(Function));
    expect(rgb2hsl).toEqual(expect.any(Function));
    expect(rgb2oklab).toEqual(expect.any(Function));
    expect(rgb2oklch).toEqual(expect.any(Function));
    expect(rotate).toEqual(expect.any(Function));
    expect(saturate).toEqual(expect.any(Function));
    expect(scheme).toEqual(expect.any(Function));
    expect(swatch).toEqual(expect.any(Function));
    expect(textColor).toEqual(expect.any(Function));
    expect(transparentize).toEqual(expect.any(Function));
  });
});
